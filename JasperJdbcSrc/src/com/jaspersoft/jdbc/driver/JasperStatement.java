/*******************************************************************************
 * Copyright (C) 2005 - 2015 TIBCO Software Inc. All rights reserved.
 * http://www.jaspersoft.com.
 * 
 * Unless you have purchased  a commercial license agreement from Jaspersoft,
 * the following license terms  apply:
 * 
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 ******************************************************************************/

package com.jaspersoft.jdbc.driver;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

import javax.sql.rowset.CachedRowSet;

import com.jaspersoft.web.rest.JasperRestConnector;
import com.jaspersoft.web.shared.CachedRowSetWrapper;

public class JasperStatement implements Statement {

	private JasperRestConnector restConnector = null;
	private CachedRowSet cachedrowset = null;
	private CachedRowSetWrapper cachedrowsetwrapper = null;
	private Connection connection = null;
	

	/**
	 * Constructors does initialization of the CachedRowSetWrapper used for all 
	 * futher communication with the backend
	 * @param rInvoke  JasperRestConnector 
	 * @throws SQLException
	 */
	public JasperStatement(Connection conn, JasperRestConnector rInvoke) throws SQLException{
		this.restConnector = rInvoke;
		this.cachedrowset = rInvoke.createCachedRowSet(); // This will hold all set values set to a statement
		this.connection = conn;
				
	}
	
	/*******************************************************************************************/
	/**
	 * Protected methods used by JasperPreparedStatement class
	 * @throws SQLException 
	 * 
	 */
	
	protected void initCachedRowSetWrapper() throws SQLException{
		
		this.cachedrowsetwrapper = new CachedRowSetWrapper();
		// generate a unique id for this Select to sent to the backend. This is used to cached the connection in 
		// the backed and get row chunks
		this.cachedrowsetwrapper.generateRequestID(); 
		// create a cachedRowset this is the only place a CachedRowSet is created in the driver
		//this.cachedrowsetwrapper.setCachedRowSet(this.cachedrowset.createCopy()); 
		this.cachedrowsetwrapper.setCachedRowSet(this.cachedrowset);
		
	}
	protected JasperRestConnector getRestConnector() {
		return restConnector;
	}

    protected CachedRowSetWrapper getCachedRowSetWrapper(){
    	return this.cachedrowsetwrapper;
    }
    
    protected void setCachedRowSetWrapper(CachedRowSetWrapper crw){
    	this.cachedrowsetwrapper =  crw;
    }
	protected CachedRowSet getCachedrowset() {
		return this.cachedrowset;
	}
	

	/*******************************************************************************************/
	/**
	 * Below are the execute methods. Rest API invocation using JasperRestConnector is done 
	 */

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		this.getCachedrowset().setCommand(sql);
		initCachedRowSetWrapper();
		this.cachedrowsetwrapper = getRestConnector().executeRequest(cachedrowsetwrapper);
		return new JasperResultSet(this, getRestConnector(), cachedrowsetwrapper); 
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		this.getCachedrowset().setCommand(sql);
		initCachedRowSetWrapper();
		this.cachedrowsetwrapper = getRestConnector().executeRequest(cachedrowsetwrapper);
		return true;
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return 0;
	}
	
	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		return 0;
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		return 0;
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		return 0;
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		this.getCachedrowset().setCommand(sql);
		initCachedRowSetWrapper();
		this.cachedrowsetwrapper = getRestConnector().executeRequest(cachedrowsetwrapper);
		return true;
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		this.getCachedrowset().setCommand(sql);
		initCachedRowSetWrapper();
		this.cachedrowsetwrapper = getRestConnector().executeRequest(cachedrowsetwrapper);
		return true;
	}

	@Override
	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		this.getCachedrowset().setCommand(sql);
		initCachedRowSetWrapper();
		this.cachedrowsetwrapper = getRestConnector().executeRequest(cachedrowsetwrapper);
		return true;
	}
	
	@Override
	public int[] executeBatch() throws SQLException {
		return null;
	}

	//end of execute methods
	/********************************************************************************************************/

	/**
	 * Below are getters and setters for Statement properties simply handed over to CachedRowSet
	 */
	
	@Override
	public int getMaxFieldSize() throws SQLException {
		return this.getCachedrowset().getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		this.getCachedrowset().setMaxFieldSize(max);

	}

	@Override
	public int getMaxRows() throws SQLException {
		return this.getCachedrowset().getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		this.getCachedrowset().setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		this.getCachedrowset().setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return this.getCachedrowset().getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		this.getCachedrowset().setQueryTimeout(seconds);

	}

	@Override
	public void setCursorName(String name) throws SQLException {
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		this.getCachedrowset().setFetchDirection(direction); 		
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return this.getCachedrowset().getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		this.getCachedrowset().setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return this.getCachedrowset().getFetchSize(); 
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return ResultSet.CONCUR_READ_ONLY; // this is the only concurrency we support
	}

	@Override
	public int getResultSetType() throws SQLException {
		return ResultSet.TYPE_SCROLL_INSENSITIVE;// this is the only type we support 
	}
	
	//end of Statement properties
	/*****************************************************************************************/
	@Override
	public ResultSet getResultSet() throws SQLException {
		return new JasperResultSet(this, getRestConnector(), cachedrowsetwrapper); 
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return 0;
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return false;
	}
	
	
	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}
	

	@Override
	public void close() throws SQLException {
		this.getCachedrowset().close();
	}


	@Override
	public void cancel() throws SQLException {

	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return null;
	}

	@Override
	public void clearWarnings() throws SQLException {
	}


	@Override
	public void addBatch(String sql) throws SQLException {
	}

	@Override
	public void clearBatch() throws SQLException {
	}

	@Override
	public Connection getConnection() throws SQLException {
		return this.connection;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return false;
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return null;
	}


	@Override
	public int getResultSetHoldability() throws SQLException {
		return 0;
	}

	@Override
	public boolean isClosed() throws SQLException {
		return this.getCachedrowset().isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return false;
	}

	@Override
	public void closeOnCompletion() throws SQLException {

	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return false;
	}

	//End of other methods
	/**********************************************************************************/
}
